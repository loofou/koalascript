// <auto-generated />
#pragma warning disable CS0105
using KoalaLiteDb.Tests.Data;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace KoalaLiteDb.Tables
{
   public sealed partial class ConfigTable : TableBase<Config>, ITableUniqueValidate
   {
        public Func<Config, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<Config, string> primaryIndexSelector;


        public ConfigTable(Config[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.ConfigId;
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public Config FindByConfigId(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, false);
        }
        
        public bool TryFindByConfigId(string key, out Config result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public Config FindClosestByConfigId(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<Config> FindRangeByConfigId(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
            ValidateUniqueCore(data, primaryIndexSelector, "ConfigId", resultSet);       
        }

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(Config), typeof(ConfigTable), "Config",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(Config).GetProperty("ConfigId")),
                    new MasterMemory.Meta.MetaProperty(typeof(Config).GetProperty("Settings")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Config).GetProperty("ConfigId"),
                    }, true, true, System.StringComparer.Ordinal),
                });
        }

    }
}